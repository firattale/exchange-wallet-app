{"version":3,"sources":["app/exchangeSlice.js","app/walletSlice.js","constants/index.js","api/api.js","helper.js","components/ExchangeRates/ExchangeRates.react.js","components/Header/Header.react.js","components/Wallet/FirstWallet.react.js","components/Wallet/SecondWallet.react.js","components/App/App.js","app/store.js","serviceWorker.js","index.js"],"names":["exchangeSlice","createSlice","name","initialState","firstCurrency","firstSign","secondCurrency","currencyRate","secondSign","reducers","changeFirstCurrency","state","action","payload","first","changeSecondCurrency","second","changeCurrencyRate","actions","selectFirstCurrency","exchange","selectSecondCurrency","selectCurrencyRate","selectFirstSign","selectSecondSign","walletSlice","USD","GBP","EUR","firstAmount","secondAmount","firstWalletError","changeFirstAmount","changeSecondAmount","checkFirstWalletError","error","updateWallet","firstWalletType","secondWalletType","selectFirstAmount","wallet","selectSecondAmount","selectFirstWalletError","currencySigns","getRates","dispatch","url","fetch","then","response","json","res","Error","rates","toFixed","catch","err","alert","clearAllIntervals","highestTimeoutId","setTimeout","i","clearTimeout","decimalValidation","value","Number","isInteger","count","split","length","changeCurrencyRateAsync","setInterval","ExchangeRates","useSelector","useDispatch","useEffect","className","slice","Header","firstWalletAmount","secondWalletAmount","isDisabled","Boolean","Button","type","data-testid","disabled","onClick","FirstWallet","currency","sign","walletAmount","Input","defaultValue","onChange","e","target","min","SecondWallet","reversedCurrencyRate","calculatedAmount","handleChange","App","configureStore","reducer","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cdb93801.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const initialState = {\r\n  firstCurrency: \"GBP\",\r\n  firstSign: \"Â£\",\r\n  secondCurrency: \"USD\",\r\n  currencyRate: \"\",\r\n  secondSign: \"$\"\r\n}\r\nexport const exchangeSlice = createSlice({\r\n  name: 'exchange',\r\n  initialState,\r\n  reducers: {\r\n    changeFirstCurrency: (state, action) => {\r\n      const { first, firstSign } = action.payload\r\n      state.firstCurrency = first;\r\n      state.firstSign = firstSign;\r\n    },\r\n    changeSecondCurrency: (state, action) => {\r\n      const { second, secondSign } = action.payload\r\n      state.secondCurrency = second;\r\n      state.secondSign = secondSign;\r\n    },\r\n    changeCurrencyRate: (state, action) => {\r\n      state.currencyRate = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { changeFirstCurrency, changeSecondCurrency, changeCurrencyRate } = exchangeSlice.actions;\r\n\r\nexport const selectFirstCurrency = state => state.exchange.firstCurrency;\r\nexport const selectSecondCurrency = state => state.exchange.secondCurrency;\r\nexport const selectCurrencyRate = state => state.exchange.currencyRate;\r\nexport const selectFirstSign = state => state.exchange.firstSign;\r\nexport const selectSecondSign = state => state.exchange.secondSign;\r\n\r\nexport default exchangeSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nexport const initialState = {\r\n  USD: 40.00,\r\n  GBP: 50.00,\r\n  EUR: 60.00,\r\n  firstAmount: \"\",\r\n  secondAmount: \"\",\r\n  firstWalletError: null\r\n}\r\nexport const walletSlice = createSlice({\r\n  name: 'wallet',\r\n  initialState,\r\n  reducers: {\r\n    changeFirstAmount: (state, action) => {\r\n      const { firstAmount } = action.payload\r\n      state.firstAmount = firstAmount;\r\n    },\r\n    changeSecondAmount: (state, action) => {\r\n      const { secondAmount } = action.payload\r\n      state.secondAmount = secondAmount;\r\n    },\r\n    checkFirstWalletError: (state, action) => {\r\n      const { error } = action.payload\r\n      state.firstWalletError = error;\r\n    },\r\n    updateWallet: (state, action) => {\r\n      const { firstWalletType, firstAmount, secondWalletType, secondAmount } = action.payload\r\n      state[firstWalletType] = firstAmount;\r\n      state[secondWalletType] = secondAmount;\r\n      state.firstAmount = \"\"\r\n      state.secondAmount = \"\"\r\n    },\r\n  },\r\n});\r\n\r\nexport const { changeFirstAmount, changeSecondAmount, updateWallet, checkFirstWalletError } = walletSlice.actions;\r\n\r\nexport const selectFirstAmount = state => state.wallet.firstAmount;\r\nexport const selectSecondAmount = state => state.wallet.secondAmount;\r\nexport const selectFirstWalletError = state => state.wallet.firstWalletError;\r\n\r\nexport default walletSlice.reducer;\r\n","export const API_URL = \"https://api.exchangeratesapi.io\"\n\nexport const currencySigns = {\n    \"USD\": \"$\",\n    \"GBP\": \"Â£\",\n    \"EUR\": \"â¬\",\n}","import { API_URL } from '../constants';\nimport { changeCurrencyRate } from '../app/exchangeSlice';\n\nexport const getRates = (payload, dispatch) => {\n  const { first, second } = payload\n  const url = `${API_URL}/latest?base=${first}&symbols=${second}`;\n\n  return fetch(url)\n    .then(response => response.json())\n    .then((res) => {\n      if (res.error) {\n        throw new Error(\"There is something wrong with your request. Please try again!\")\n      }\n      dispatch(changeCurrencyRate(res.rates[second].toFixed(4)))\n    })\n    .catch(err => {\n      alert(err)\n    })\n}\n","import { checkFirstWalletError } from './app/walletSlice';\nimport { getRates } from './api/api'\n\nexport const clearAllIntervals = () => {\n    // eslint-disable-next-line no-implied-eval\n    const highestTimeoutId = setTimeout(\";\");\n    for (var i = 0; i < highestTimeoutId; i++) {\n        clearTimeout(i);\n    }\n}\n\nexport const decimalValidation = (value, dispatch) => {\n    if (!Number.isInteger(Number(value))) {\n        let count = value.split(\".\")[1].length || 0;\n        if (count < 3) {\n            dispatch(checkFirstWalletError({ error: null }))\n        } else {\n            dispatch(checkFirstWalletError({ error: \"Your input must have only two digits after comma\" }))\n        }\n    } else {\n        dispatch(checkFirstWalletError({ error: null }))\n    }\n\n}\n\nexport const changeCurrencyRateAsync = (payload) => dispatch => {\n    clearAllIntervals()\n    getRates(payload, dispatch);\n    setInterval(() => {\n        getRates(payload, dispatch);\n    }, 10000);\n};\n\nconst exportFunctions = {\n    clearAllIntervals,\n    decimalValidation,\n    changeCurrencyRateAsync\n};\nexport default exportFunctions;\n","import React, { useEffect } from 'react'\nimport './ExchangeRates.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    selectFirstCurrency,\n    selectSecondCurrency,\n    selectCurrencyRate,\n    selectFirstSign,\n    selectSecondSign\n} from '../../app/exchangeSlice';\nimport { changeCurrencyRateAsync } from \"../../helper\"\nexport const ExchangeRates = () => {\n    const first = useSelector(selectFirstCurrency);\n    const second = useSelector(selectSecondCurrency);\n    const currencyRate = useSelector(selectCurrencyRate);\n    const firstSign = useSelector(selectFirstSign);\n    const secondSign = useSelector(selectSecondSign);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(changeCurrencyRateAsync({ first, second }));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [first, second])\n    return (\n        <div className=\"exchange-container\">\n            <span className=\"currency\">{firstSign}</span>\n            1=\n            <span className=\"currency\">{secondSign}</span>\n            {currencyRate.slice(0, 4)}\n            <span className=\"currency\">{currencyRate.slice(4, 6)}</span>\n        </div>)\n}\n\nexport default ExchangeRates;","import React from 'react'\nimport './Header.css';\nimport ExchangeRates from '../ExchangeRates/ExchangeRates.react'\nimport { Button } from 'reactstrap';\nimport { updateWallet, selectFirstWalletError } from '../../app/walletSlice.js';\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport const Header = ({ firstAmount, firstCurrency, secondCurrency, currencyRate }) => {\n    const firstWalletAmount = useSelector(state => state.wallet[firstCurrency].toFixed(2));\n    const secondWalletAmount = useSelector(state => state.wallet[secondCurrency].toFixed(2));\n    const error = useSelector(selectFirstWalletError);\n\n    const isDisabled = Boolean(+firstAmount > firstWalletAmount || firstAmount === \"\" || firstCurrency === secondCurrency || error);\n    const dispatch = useDispatch();\n\n    const handleExchange = () => {\n        dispatch(updateWallet({\n            firstWalletType: firstCurrency,\n            secondWalletType: secondCurrency,\n            firstAmount: +firstWalletAmount - firstAmount,\n            secondAmount: +secondWalletAmount +(firstAmount * currencyRate),\n        }))\n    }\n    return (\n        <div className=\"header-container\">\n            <Button type=\"button\" className=\"header-button\">Cancel</Button>\n            <ExchangeRates />\n            <Button type=\"button\" data-testid=\"exchangeButton\" className=\"header-button\" disabled={isDisabled} onClick={handleExchange} >Exchange</Button>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react'\nimport \"./Wallet.css\"\nimport { changeFirstAmount, selectFirstWalletError, changeSecondAmount } from '../../app/walletSlice.js';\nimport { changeFirstCurrency } from '../../app/exchangeSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Input } from 'reactstrap'\nimport { currencySigns } from \"../../constants\";\nimport { decimalValidation } from '../../helper';\n\n// Making a generic Wallet component gets really messy, that's why I decided to use two wallets\nexport const FirstWallet = ({ currency, sign, secondCurrency, currencyRate, firstAmount }) => {\n    const dispatch = useDispatch();\n    const walletAmount = useSelector(state => state.wallet[currency].toFixed(2))\n    const error = useSelector(selectFirstWalletError);\n    const handleCurrencyChange = value => {\n        dispatch(changeFirstCurrency({ first: value, firstSign: currencySigns[value] }));\n        dispatch(changeFirstAmount({ firstAmount: \"\" }));\n        dispatch(changeSecondAmount({ secondAmount: \"\" }));\n    }\n\n    const handleChange = (value) => {\n        decimalValidation(value, dispatch)\n        dispatch(changeFirstAmount({ firstAmount: value }))\n        dispatch(changeSecondAmount({ secondAmount: (value * currencyRate).toFixed(2) }))\n    }\n\n    return (\n        <>\n            <div className=\"wallet-container background\" >\n                <div className=\"d-flex flex-column justify-content-between h-100\">\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                        <Input type=\"select\" data-testid=\"wallet-select\" name=\"select\" className=\"wallet-currency background\" defaultValue={currency} onChange={e => handleCurrencyChange(e.target.value)}>\n                            <option>GBP</option>\n                            <option>USD</option>\n                            <option>EUR</option>\n                        </Input>\n                        <input type=\"number\" data-testid=\"wallet-input-1\" className=\"wallet-input\" value={firstAmount} onChange={e => handleChange(e.target.value)} disabled={currency === secondCurrency} min=\"0\" />\n                    </div>\n                    {error && <p className=\"wallet-error-message\">{error}</p>}\n                    <div>\n                        <div className=\"wallet-pocket\">You Have {sign}{walletAmount}</div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"arrow-down\"></div>\n        </>\n    )\n}\n\n\nexport default FirstWallet;","import React from 'react'\nimport \"./Wallet.css\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Input } from 'reactstrap'\nimport { changeSecondCurrency } from '../../app/exchangeSlice';\nimport { changeFirstAmount, changeSecondAmount, selectSecondAmount } from '../../app/walletSlice';\nimport { currencySigns } from \"../../constants\";\nimport { decimalValidation } from '../../helper'\n\n// Making a generic Wallet component gets really messy, that's why I decided to use two wallets\nexport const SecondWallet = ({ firstSign, firstCurrency, currency, secondSign, currencyRate }) => {\n    const dispatch = useDispatch();\n    const secondAmount = useSelector(selectSecondAmount);\n    const reversedCurrencyRate = (1 / currencyRate).toFixed(2)\n    const walletAmount = useSelector(state => state.wallet[currency].toFixed(2))\n    const handleCurrencyChange = value => {\n        dispatch(changeSecondCurrency({ second: value, secondSign: currencySigns[value] }));\n        dispatch(changeFirstAmount({ firstAmount: \"\" }));\n        dispatch(changeSecondAmount({ secondAmount: \"\" }));\n    }\n    const handleChange = (value) => {\n        const calculatedAmount = value * (1 / currencyRate)\n        decimalValidation(value, dispatch)\n        dispatch(changeFirstAmount({ firstAmount: calculatedAmount.toFixed(2) }))\n        dispatch(changeSecondAmount({ secondAmount: value }))\n    }\n    return <div className=\"wallet-container\">\n        <div className=\"d-flex flex-column justify-content-between h-100\">\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <Input type=\"select\" data-testid=\"wallet-select\" name=\"select\" className=\"wallet-currency-second\" defaultValue={currency} onChange={e => handleCurrencyChange(e.target.value)}>\n                    <option>GBP</option>\n                    <option>USD</option>\n                    <option>EUR</option>\n                </Input>\n                <input type=\"number\" data-testid=\"wallet-input-2\" className=\"wallet-input-second\" value={secondAmount} onChange={e => handleChange(e.target.value)} disabled={currency === firstCurrency} min=\"0\" />\n\n            </div>\n            <div className=\"d-flex justify-content-between\">\n                <div className=\"wallet-pocket\">You Have {secondSign}{walletAmount}</div>\n                <div className=\"wallet-pocket\">1{secondSign}={firstSign}{reversedCurrencyRate}</div>\n            </div>\n        </div>\n    </div>\n}\n\n\nexport default SecondWallet;","import React from 'react';\r\nimport './App.css';\r\nimport Header from '../Header/Header.react'\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  selectFirstCurrency,\r\n  selectSecondCurrency,\r\n  selectFirstSign,\r\n  selectSecondSign,\r\n  selectCurrencyRate\r\n} from '../../app/exchangeSlice';\r\nimport { selectFirstAmount } from '../../app/walletSlice.js';\r\nimport FirstWallet from '../Wallet/FirstWallet.react';\r\nimport SecondWallet from '../Wallet/SecondWallet.react';\r\n\r\nexport const App = () => {\r\n  const firstCurrency = useSelector(selectFirstCurrency);\r\n  const secondCurrency = useSelector(selectSecondCurrency);\r\n  const firstSign = useSelector(selectFirstSign);\r\n  const secondSign = useSelector(selectSecondSign);\r\n  const firstAmount = useSelector(selectFirstAmount);\r\n  const currencyRate = useSelector(selectCurrencyRate);\r\n\r\n  return (\r\n    <div className=\"h-100 w-100\">\r\n      <Header firstAmount={firstAmount} firstCurrency={firstCurrency} secondCurrency={secondCurrency} currencyRate={currencyRate} />\r\n      <div className=\"wallets-container\">\r\n        <FirstWallet currency={firstCurrency} firstAmount={firstAmount} secondCurrency={secondCurrency} sign={firstSign} currencyRate={currencyRate} />\r\n        <SecondWallet currency={secondCurrency} firstCurrency={firstCurrency} firstSign={firstSign} secondSign={secondSign} currencyRate={currencyRate} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport exchangeSlice from './exchangeSlice';\r\nimport walletSlice from './walletSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    exchange: exchangeSlice,\r\n    wallet: walletSlice,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n/* istanbul ignore file */\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","/* istanbul ignore file */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}